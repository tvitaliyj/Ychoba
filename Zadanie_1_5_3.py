# 3. Есть два списка: tutors - имена учеников, klasses - названия их классов.
# Необходимо реализовать генератор или функцию-генератор, возвращающий кортежи вида `(<tutor>, <klass>)`.
#
# Техническое задание
# Количество генерируемых кортежей не должно быть больше длины списка tutors.
# Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние
# кортежи в виде: `(<tutor>, None)`, например: `('Станислав', None)`
# Если в списке tutors меньше элементов, чем в списке klasses, то смотри пункт 1.
# Генератор возвращает кортежи указанного вида.
# Доказать, что вы создали именно генератор. Вывести все его значения на экран.
# Не используйте в этом задании функции zip и zip_longest.
# Не меняйте исходные списки tutors и klasses.
# Проверьте работоспособность для обоих вариантов: klasses меньше tutors и tutors меньше klasses.
# Функция должна работать со списками любой длины.
#
# Примеры/Тесты:
#
# tutors = [
#     'Иван', 'Анастасия', 'Петр', 'Сергей',
#     'Дмитрий', 'Борис', 'Елена'
# ]
# klasses = [
#     '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
# ]
#
# Результат, где учеников меньше
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', '8Б')
# ('Борис', '10А')
# ('Елена', '10Б')
#
# Результат, где учеников больше
#
# Ученики: ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
# Классы: ['9А', '7В', '9Б', '9В']
# Тип объекта: <class 'generator'>
# Все значения генератора:
# ('Иван', '9А')
# ('Анастасия', '7В')
# ('Петр', '9Б')
# ('Сергей', '9В')
# ('Дмитрий', None)
# ('Борис', None)
# ('Елена', None)
#
# Алгоритм
# Если задача вызывает затруднения - решите ее с помощью циклов for. Затем на основании своего решения сформируйте
# генератор или функцию-генератор.


def moi_gen(tutors, klasses):
    deti = len(tutors)
    klas = len(klasses)
    raznica = max(deti, klas)
    for non in range(1, raznica + 1):
        if non <= deti and non <= klas:
            yield tutors[non - 1], klasses[non - 1]
        elif non != deti and non <= klas:
            yield None, klasses[non - 1]
        elif non <= deti and non != klas:
            yield tutors[non - 1], None


tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '11B', '7A']

znch = moi_gen(tutors, klasses)
for ank in znch:
    print(ank)
