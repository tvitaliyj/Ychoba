# 1. Написать функцию email_parse(<email_address>), которая при помощи регулярного выражения извлекает
# имя пользователя и почтовый домен из email адреса и возвращает их в виде словаря.
#
# Техническое задание:
# Функция:
# принимает один параметр: строку с email
# извлекает имя пользователя - то, что до @ и домен - то, что после @
# возвращает словарь вида {'username': <имя_пользователя>, 'domain': <домен>}
# Если адрес не валиден, выбросить исключение ValueError. Можно с сообщением вида «wrong email: <email_address>»
# Шаблон имени пользователя: латинские буквы, цифры и символы: ' . _ + -
# Шаблон домена: латинские буквы, цифры и символы . -
# В домене обязательно должна быть хотя бы одна точка
# Не использовать функцию split, теперь только регулярные выражения
# email полностью парсится за «один проход». Используйте группы.
# Чтобы проверить работоспособность функции на разных данных, вам придется «ловить» исключение в основной программе и выводить сообщение.
# Проверьте работоспособность функции на нескольких email. Обязательно на правильных и неправильных.
#
# Примеры/Тесты:
#
# >>> email_parse('someone@geekbrains.ru')
# {'username': 'someone', 'domain': 'geekbrains.ru'}
# >>> email_parse('someone@geekbrainsru')
# Traceback (most recent call last):
#   File "<stdin>", line 1, in <module>
#   ...;
#     raise ValueError(msg)
# ValueError: wrong email: someone@geekbrainsru
#
# Примечание:
# Подумайте о возможных ошибках в адресе и постарайтесь учесть их в регулярном выражении
# Имеет ли смысл в данном случае использовать функцию re.compile()?
# Не используйте слишком широкий шаблон для почты. Шаблон должен пропускать только то, что указано в условии
# Подумайте, сколько групп здесь используется?

import re
reg_vr_url = r'''
\w[A-Za-z0-9.+'_-]+      # Имя с элементами . + ' _ -
\D@                      # @
\w[A-Za-z0-9.-]+         # Домен c элементами . -
\.[ru|com|org]+          # ru или com или org
'''
chiltr = re.compile(reg_vr_url, re.VERBOSE)
slovar_url = {}

def email_parse(mail):
    sp_adres = chiltr.findall(mail)
    for url in sp_adres:
        sp_im_do = url.split('@')
        slovar_url['username'] = sp_im_do[0]
        slovar_url['domain'] = sp_im_do[1]
        return slovar_url

if __name__ == '__main__':
    mail = "someone@geekbrains.ru"
    print(email_parse(mail))
