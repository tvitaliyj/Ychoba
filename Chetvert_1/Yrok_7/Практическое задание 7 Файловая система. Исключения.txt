Практическое задание 7 "Файловая система. Исключения"
[2021-11-12 Пт]
Тема урока: Работа с файлами и директориями: копирование, перемещение, создание, рекурсивный обход директории. Работа с Исключениями.

Для всех заданий этого урока:

Для каждой задачи создайте свою папку, например «task_1» и т.п., и в ней храните данные для этой задачи.
Ваш код должен работать на любой ОС: не используйте в качестве путей строки с слешами.
Задачи со звездочкой предназначены для продвинутых учеников, которым мало сделать обычное задание.
1. Написать скрипт, создающий стартер (заготовку) для проекта со следующей структурой папок:
|--my_project
   |--settings
   |--mainapp
   |--adminapp
   |--authapp
Техническое задание

Продумайте ситуацию, когда все или часть этих папок уже есть в директории.
Выберите наиболее подходящую структуру данных для хранения имен папок так, чтобы легко расширить количество создаваемых папок, например до 100 папок.
Примечание:

Можно ли будет расширять конфигурацию и хранить данные о вложенных папках и файлах?
2. [Задача со звездочкой]: усложненный вариант задания 1. Написать скрипт, создающий из config_2.yaml стартер для проекта со следующей структурой:
|--my_project
   |--settings
   |  |--__init__.py
   |  |--dev.py
   |  |--prod.py
   |--mainapp
   |  |--__init__.py
   |  |--models.py
   |  |--views.py
   |  |--templates
   |     |--mainapp
   |        |--base.html
   |        |--index.html
   |--authapp
   |  |--__init__.py
   |  |--models.py
   |  |--views.py
   |  |--templates
   |     |--authapp
   |        |--base.html
   |        |--index.html
Техническое задание

Пример файла config_2.yaml можно скачать из прикрепленных к уроку файлов. Или его можно создать в любом текстовом редакторе «руками» (не программно).
Не используйте библиотеки для работы с YAML, проведите парсинг вручную - это несложно.
Подумайте о возможных исключениях при работе скрипта.
Алгоритм

Чтобы распарсить YAML файл, внимательно проанализируйте его структуру: как в файле обозначен следующий уровень папок.
Здесь надо немного повозиться с уровнями вложенности папок. Для каждой строки мы либо уходим «вглубь» и путь нарастает, либо возвращаемся «наверх» и надо убрать лишние элементы из пути.
Создание файла отличается от создания директории: на Windows используйте для этого «открыть для записи и ничего не записать», на linux - mknod. Помните о переносимости кода между ОС.
3. Создать структуру файлов и папок, как написано в задании 2 (при помощи скрипта или «руками» в проводнике). Написать скрипт, который собирает все шаблоны в одну папку templates:
|--my_project
   ...
  |--templates
   |   |--mainapp
   |   |  |--base.html
   |   |  |--index.html
   |   |--authapp
   |      |--base.html
   |      |--index.html
Техническое задание

В папках mainapp, authapp и аналогичных могут быть и другие файлы, кроме приведенных в примере.
Папку templates надо создать внутри исходной директории, в примере - внутри my_project
Шаблон - это папка templates. Ее уровень в структуре папок может быть любым.
Исходные файлы и папки необходимо оставить; обратите внимание, что html-файлы расположены в родительских папках (они играют роль пространств имён).
Предусмотреть возможные исключительные ситуации; это реальная задача, которая решена, например, во фреймворке django.
4. Написать скрипт, который для заданной папки выводит статистику размеров файлов
Формат вывода результата:


{
  100: 15,
  1000: 3,
  10000: 7,
  100000: 2
}

Тут 15 файлов размером не более 100 байт; 3 файла больше 100 и не больше 1000 байт...;

Техническое задание

Директорию с файлами some_data можно скачать из прикрепленных к уроку файлов.
Результат возвращается в виде словаря
ключи — верхняя граница размера файла (пусть будет кратна 10)
значения — общее количество файлов (в том числе и в подпапках), размер которых не превышает этой границы, но больше предыдущей (начинаем с 0)
Программа должна легко модифицироваться под другие границы диапазонов или увеличение их количества.
Примечание:

размер файла можно получить из атрибута .st_size объекта os.stat.
5. [Задача со звездочкой]: усложненный вариант задания 4. Написать скрипт, который для заданной папки выводит статистику размеров файлов по расширениям.
Формат вывода результата:


{
    100: [15, [txt']],
    1000: [3, ['py', 'txt']],
    10000: [7, ['html', 'css']],
    100000: [2, ['png', 'jpg']]
  }

Техническое задание

Директорию с файлами some_data_adv можно скачать из прикрепленных к уроку файлов.
Результат возвращается в виде словаря
ключи — верхняя граница размера файла (пусть будет кратна 10) - как в задании 4.
значения — списки вида [<files_quantity>, [<files_extensions_list>]]. В список <files_extensions_list> заносятся все расширения для файлов удовлетворяющих условию размера, без повторений.
Словарь сохраните в файл <folder_name>_summary.json в той же папке, где запустили скрипт.